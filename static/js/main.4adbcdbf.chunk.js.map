{"version":3,"sources":["assets/images/pieces/line.svg","assets/images/pieces/curve.svg","assets/images/pieces/bridge.svg","assets/images/pieces/switch.svg","assets/images/pieces/padure.svg","assets/images/pieces/gara.svg","constants/pieces.js","constants/game.js","store/actions/game.js","store/types/game.js","constants/assetsMap.js","components/Piece.jsx","views/Board.jsx","store/actions/board.js","store/types/board.js","utils/gameHelpers.js","views/App.jsx","store/reducers/board.js","store/reducers/game.js","store/reducers/index.js","store/index.js","index.js"],"names":["module","exports","PIECE_TYPES","bridge","type","connections","allowRotate","curve","line","switch","station","forest","GAME_STAGE","FOREST","moves","piece","STATIONS","TRACKS","setGameStage","stage","payload","setActivePlayer","player","playerEndTurn","dispatch","getState","game","players","activeTurn","activeIdx","findIndex","p","id","turns","nextPlayer","allowed","executed","PIECES","linePiece","curvePiece","bridgePiece","switchPiece","forestPiece","stationPiece","Piece","props","showWheel","setState","wheel","hideWheel","setSelection","tempType","saveSelection","setPiece","x","y","state","tempRotate","makeMove","setRotation","rotation","Math","abs","rotate","this","className","Object","keys","filter","includes","map","key","idx","onClick","src","icon","faUndo","faTimes","Component","Board","board","initBoard","initPlayers","rows","columns","playerMakeMove","style","width","row","i","cell","j","flex","mapDispatchToProps","config","defaultPiece","occupied","matrix","setBoard","Array","fill","playerCount","parseInt","_","name","setPlayers","activePlayer","console","log","reverse","times","unshift","pop","push","shift","rotateConnections","savePiece","connect","setRows","setColumns","pattern","value","onChange","e","target","initialState","count","reducers","combineReducers","action","assign","active","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.4adbcdbf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/line.2e3e852f.svg\";","module.exports = __webpack_public_path__ + \"static/media/curve.e4a33090.svg\";","module.exports = __webpack_public_path__ + \"static/media/bridge.2b4139f0.svg\";","module.exports = __webpack_public_path__ + \"static/media/switch.90588404.svg\";","module.exports = __webpack_public_path__ + \"static/media/padure.7a9c9b0c.svg\";","module.exports = __webpack_public_path__ + \"static/media/gara.830c43ab.svg\";","// NORTH, EAST, SOUTH, WEST - CONNECTIONS ARE CLOCKWISE\n\nexport const PIECE_TYPES = {\n  bridge: {\n    type: 'bridge',\n    connections: [1, 1, 1, 1],\n    allowRotate: true\n  },\n  curve: {\n    type: 'curve',\n    connections: [1, 1, 0, 0],\n    allowRotate: true\n  },\n  line: {\n    type: 'line',\n    connections: [0, 1, 0, 1],\n    allowRotate: true\n  },\n  switch: {\n    type: 'switch',\n    connections: [1, 1, 0, 1],\n    allowRotate: true\n  },\n  station: {\n    type: 'station',\n    connections: [1, 1, 0, 1],\n    allowRotate: true\n  },\n  forest: {\n    type: 'forest',\n    connections: [0, 0, 0, 0],\n    allowRotate: false\n  }\n};\n","import { PIECE_TYPES } from 'constants/pieces';\n\nexport const GAME_STAGE = {\n  FOREST: {\n    type: 'forest',\n    moves: 3,\n    piece: [PIECE_TYPES.forest.type]\n  },\n  STATIONS: {\n    type: 'stations',\n    moves: 2,\n    piece: [PIECE_TYPES.station.type]\n  },\n  TRACKS: {\n    type: 'tracks',\n    moves: 1,\n    piece: [PIECE_TYPES.bridge.type, PIECE_TYPES.curve.type, PIECE_TYPES.line.type, PIECE_TYPES.switch.type]\n  }\n};\n","import { GAME_STAGE } from 'constants/game';\nimport {\n  SET_TURN,\n  SET_PLAYER_COUNT,\n  SET_PLAYERS,\n  SET_ACTIVE_PLAYER,\n  SET_GAME_STAGE,\n  PLAYER_MOVE_ADD\n} from 'store/types/game';\n\nexport const setGameStage = stage => ({ type: SET_GAME_STAGE, payload: stage });\nexport const setPlayerCount = playerCount => ({ type: SET_PLAYER_COUNT, payload: playerCount });\nexport const setPlayers = players => ({ type: SET_PLAYERS, payload: players });\nexport const setActivePlayer = player => ({ type: SET_ACTIVE_PLAYER, payload: player });\nexport const playerMoveAdd = () => ({ type: PLAYER_MOVE_ADD });\n\nexport const changeGameStage = () => (dispatch, getState) => {\n  const {\n    game: {\n      turns: { stage }\n    }\n  } = getState();\n  stage === GAME_STAGE.FOREST && dispatch(setGameStage(GAME_STAGE.STATIONS));\n  stage === GAME_STAGE.STATIONS && dispatch(setGameStage(GAME_STAGE.TRACKS));\n};\n\nexport const playerEndTurn = () => (dispatch, getState) => {\n  const {\n    game: {\n      players,\n      activeTurn: { player }\n    }\n  } = getState();\n  const activeIdx = players.findIndex(p => p.id === player.id);\n  if (!players[activeIdx + 1]) dispatch(changeGameStage());\n  const {\n    game: {\n      turns: {\n        stage: { moves }\n      }\n    }\n  } = getState();\n  const nextPlayer = {\n    player: players[activeIdx + 1] ? players[activeIdx + 1] : players[0],\n    moves: { allowed: moves, executed: 0 }\n  };\n  dispatch(setActivePlayer(nextPlayer));\n};\n\nexport const initPlayers = () => (dispatch, getState) => {\n  const {\n    game: { playerCount }\n  } = getState();\n\n  const players = [...Array(parseInt(playerCount))].map((_, i) => ({\n    id: i + 1,\n    name: `Player ${i + 1}`\n  }));\n\n  dispatch(setPlayers(players));\n  dispatch(setGameStage(GAME_STAGE.FOREST));\n  const activePlayer = {\n    player: { ...players[0] },\n    moves: { allowed: GAME_STAGE.FOREST.moves, executed: 0 }\n  };\n  dispatch(setActivePlayer(activePlayer));\n};\nexport const playerMakeMove = () => (dispatch, getState) => {\n  const {\n    game: {\n      activeTurn: {\n        moves: { allowed, executed }\n      }\n    }\n  } = getState();\n\n  dispatch(playerMoveAdd());\n  if (executed + 1 === allowed) dispatch(playerEndTurn());\n};\n\nexport const setTurn = () => ({ type: SET_TURN });\n","export const NEXT_TURN = 'NEXT_TURN';\nexport const INIT_PLAYERS = 'INIT_PLAYERS';\nexport const SET_PLAYER_COUNT = 'SET_PLAYER_COUNT';\nexport const SET_PLAYERS = 'SET_PLAYERS';\nexport const SET_TURN = 'SET_PLAYER_TURN';\nexport const SET_ACTIVE_PLAYER = 'SET_ACTIVE_PLAYER';\nexport const SET_GAME_STAGE = 'SET_GAME_STAGE';\nexport const PLAYER_MAKE_MOVE = 'PLAYER_MAKE_MOVE';\nexport const PLAYER_MOVE_ADD = 'PLAYER_MOVE_ADD';\nexport const PLAYER_END_TURN = 'PLAYER_END_TURN';","import linePiece from 'images/pieces/line.svg';\nimport curvePiece from 'images/pieces/curve.svg';\nimport bridgePiece from 'images/pieces/bridge.svg';\nimport switchPiece from 'images/pieces/switch.svg';\nimport forestPiece from 'images/pieces/padure.svg';\nimport stationPiece from 'images/pieces/gara.svg';\n\nexport const PIECES = {\n  line: linePiece,\n  curve: curvePiece,\n  bridge: bridgePiece,\n  switch: switchPiece,\n  forest: forestPiece,\n  station: stationPiece\n};\n\nexport default PIECES;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PIECES from 'constants/assetsMap';\nimport { PIECE_TYPES } from 'constants/pieces';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUndo, faTimes } from '@fortawesome/free-solid-svg-icons';\n\nexport class Piece extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allowRotate: false,\n      rotate: props.rotate ? props.rotate : 0,\n      tempType: props.type,\n      tempRotate: props.rotate ? props.rotate : 0,\n      wheel: false\n    };\n  }\n\n  showWheel = () => this.setState({ wheel: true });\n\n  hideWheel = () => this.setState({ wheel: false });\n\n  setSelection = type =>\n    this.setState({ tempType: type, allowRotate: PIECE_TYPES[type].allowRotate });\n\n  saveSelection = () => {\n    this.hideWheel();\n    this.props.setPiece(this.props.x, this.props.y, this.state.tempType, this.state.tempRotate);\n    this.props.makeMove();\n  };\n\n  setRotation = rotation => {\n    this.setState(state => ({\n      tempRotate: Math.abs(state.tempRotate + rotation) === 360 ? 0 : state.tempRotate + rotation\n    }));\n  };\n\n  render() {\n    const {\n      props: { type, rotate, stage },\n      state: { tempType, tempRotate, wheel, allowRotate }\n    } = this;\n\n    return (\n      <div className={`piece piece-${type} ${wheel ? 'show-wheel' : ''}`}>\n        <div className={'selection-wheel'}>\n          {Object.keys(PIECES)\n            .filter(piece => stage.piece.includes(piece))\n            .map((key, idx) => {\n              return (\n                <div\n                  key={idx}\n                  className={`quadrant quadrant-${idx}`}\n                  onClick={() => this.setSelection(key)}\n                >\n                  <img src={PIECES[key]} />\n                </div>\n              );\n            })}\n          <div className={'selection-preview'} onClick={() => this.saveSelection()}>\n            {tempType && <img className={`rotate-${tempRotate}`} src={PIECES[tempType]} />}\n          </div>\n          {allowRotate && (\n            <>\n              <div className={'selection-rotate-right'} onClick={() => this.setRotation(90)}>\n                <FontAwesomeIcon icon={faUndo} />\n              </div>\n              <div className={'selection-rotate-left'} onClick={() => this.setRotation(-90)}>\n                <FontAwesomeIcon icon={faUndo} />\n              </div>\n            </>\n          )}\n          <div className={'selection-close'} onClick={() => this.hideWheel()}>\n            <FontAwesomeIcon icon={faTimes} />\n          </div>\n        </div>\n        <div className={'piece-image'} onClick={() => this.showWheel()}>\n          {type && <img className={`rotate-${rotate}`} src={PIECES[type]} />}\n        </div>\n      </div>\n    );\n  }\n}\n\nPiece.propTypes = {\n  x: PropTypes.number,\n  y: PropTypes.number,\n  type: PropTypes.string,\n  rotate: PropTypes.number,\n  setPiece: PropTypes.func,\n  makeMove: PropTypes.func,\n  stage: PropTypes.object\n};\n\nexport default Piece;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { initBoard, setPiece } from 'store/actions/board';\nimport { initPlayers, playerMakeMove } from 'store/actions/game';\nimport Piece from 'components/Piece';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: []\n    };\n  }\n\n  componentDidMount() {\n    const {\n      props: { initBoard, initPlayers }\n    } = this;\n\n    initBoard();\n    initPlayers();\n  }\n\n  render() {\n    const {\n      props: { board, rows, columns, setPiece, playerMakeMove, stage }\n    } = this;\n    return (\n      <div className={'game-board'} style={{ width: `calc(80px * ${columns})` }}>\n        {board.map((row, i) =>\n          row.map((cell, j) => {\n            return (\n              <div\n                className={`cell \n                ${j === columns - 1 ? 'right-edge' : ''} \n                ${i === rows - 1 ? 'bottom-edge' : ''}`}\n                style={{ flex: `calc(100% / ${columns} - 1px) 0 0` }}\n                key={`cell-${i}${j}`}\n              >\n                <Piece\n                  x={i}\n                  y={j}\n                  type={cell.type}\n                  rotate={cell.rotation}\n                  setPiece={setPiece}\n                  makeMove={playerMakeMove}\n                  stage={stage}\n                />\n              </div>\n            );\n          })\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  board: state.board.map,\n  stage: state.game.turns.stage\n});\n\nconst mapDispatchToProps = { initBoard, initPlayers, setPiece, playerMakeMove };\n\nBoard.propTypes = {\n  rows: PropTypes.number,\n  columns: PropTypes.number,\n  board: PropTypes.array,\n  initBoard: PropTypes.func,\n  initPlayers: PropTypes.func,\n  setPiece: PropTypes.func,\n  playerMakeMove: PropTypes.func,\n  stage: PropTypes.object\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n","import { SET_BOARD, SET_ROWS, SET_COLUMNS, SET_PIECE } from 'store/types/board';\nimport { PIECE_TYPES } from 'constants/pieces';\nimport { rotateConnections } from 'utils/gameHelpers';\n\nexport const setRows = rows => ({ type: SET_ROWS, payload: rows });\nexport const setColumns = columns => ({ type: SET_COLUMNS, payload: columns });\nexport const setBoard = matrix => ({ type: SET_BOARD, payload: matrix });\n\nexport const initBoard = () => (dispatch, getState) => {\n  const {\n    board: {\n      config: { rows, columns }\n    }\n  } = getState();\n\n  const defaultPiece = {\n    occupied: false,\n    type: '',\n    rotation: 0\n  };\n\n  const matrix = new Array(rows).fill(0).map(() => new Array(columns).fill({ ...defaultPiece }));\n  dispatch(setBoard(matrix));\n};\n\nexport const savePiece = (x, y, piece) => ({ type: SET_PIECE, payload: { x, y, piece } });\n\nexport const setPiece = (x, y, type, rotation) => dispatch => {\n  console.log(type);\n  const connections = rotateConnections(PIECE_TYPES[type].connections, rotation);\n  const piece = {\n    type,\n    rotation,\n    connections\n  };\n  dispatch(savePiece(x, y, piece));\n};\n","export const SET_BOARD = 'SET_BOARD';\nexport const SET_COLUMNS = 'SET_COLUMNS';\nexport const SET_ROWS = 'SET_ROWS';\nexport const SET_PIECE = 'SET_PIECE';","// export const isMatch = (pieceA, pieceB) => {};\n\nexport const rotateConnections = (connections, rotation) => {\n  const reverse = rotation < 0;\n  const times = Math.abs(rotation / 90);\n  for (let i = 0; i < times; i++) {\n    if (reverse) connections.unshift(connections.pop());\n    else connections.push(connections.shift());\n  }\n  return connections;\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { setColumns, setRows } from 'store/actions/board';\nimport Board from 'views/Board';\n\nfunction App({ rows, columns, setRows, setColumns, stage, activePlayer }) {\n  return (\n    <div className=\"App\">\n      <div className={'controls'}>\n        <label>{'Rows:'}</label>\n        <input\n          type={'number'}\n          pattern={'[0-9]*'}\n          value={rows}\n          onChange={e => setRows(e.target.value)}\n        />\n        <br />\n        <label>{'Columns:'}</label>\n        <input\n          type={'number'}\n          pattern={'[0-9]*'}\n          value={columns}\n          onChange={e => setColumns(e.target.value)}\n        />\n        <br/>\n        <h3>Stage: {stage}</h3>\n        {activePlayer.player.name} make {activePlayer.moves.allowed - activePlayer.moves.executed} moves\n      </div>\n      <Board rows={rows} columns={columns} />\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  rows: state.board.config.rows,\n  columns: state.board.config.columns,\n  stage: state.game.turns.stage.type,\n  activePlayer: state.game.activeTurn\n});\n\nconst mapDispatchToProps = {\n  setRows,\n  setColumns\n};\n\nApp.propTypes = {\n  rows: PropTypes.number,\n  columns: PropTypes.number,\n  setRows: PropTypes.func,\n  setColumns: PropTypes.func\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { SET_BOARD, SET_COLUMNS, SET_ROWS, SET_PIECE } from 'store/types/board';\n\nexport const initialState = {\n  config: {\n    rows: 8,\n    columns: 8\n  },\n  map: []\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_BOARD:\n      return { ...state, map: action.payload };\n\n    case SET_ROWS:\n      return { ...state, config: { ...state.config, rows: action.payload } };\n\n    case SET_COLUMNS:\n      return { ...state, config: { ...state.config, columns: action.payload } };\n\n    case SET_PIECE:\n      console.log(action.payload);\n      return {\n        ...state,\n        map: Object.assign([...state.map], {\n          [action.payload.x]: Object.assign([...state.map[action.payload.x]], {\n            [action.payload.y]: {\n              ...action.payload.piece\n            }\n          })\n        })\n      };\n\n    default:\n      return state;\n  }\n};\n","import {\n  INIT_PLAYERS,\n  SET_PLAYER_COUNT,\n  SET_PLAYERS,\n  SET_TURN,\n  SET_GAME_STAGE,\n  SET_ACTIVE_PLAYER,\n  PLAYER_MOVE_ADD\n} from 'store/types/game';\n\nexport const initialState = {\n  playerCount: 2,\n  players: {},\n  turns: {\n    count: 1,\n    stage: ''\n  },\n  activeTurn: {\n    player: {},\n    moves: {\n      allowed: 0,\n      executed: 0\n    }\n  }\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case INIT_PLAYERS:\n      return { ...state, players: { ...action.payload } };\n    case SET_TURN:\n      return { ...state, turns: { ...state.turns, active: action.payload } };\n    case SET_PLAYER_COUNT:\n      return { ...state, playerCount: action.payload };\n    case SET_PLAYERS:\n      return { ...state, players: action.payload };\n    case SET_GAME_STAGE:\n      return { ...state, turns: { ...state.turns, stage: action.payload } };\n    case SET_ACTIVE_PLAYER:\n      return { ...state, activeTurn: action.payload };\n    case PLAYER_MOVE_ADD:\n      return {\n        ...state,\n        activeTurn: {\n          ...state.activeTurn,\n          moves: { ...state.activeTurn.moves, executed: state.activeTurn.moves.executed + 1 }\n        }\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport boardReducer from './board';\nimport gameReducer from './game';\n\nexport const reducers = combineReducers({\n  board: boardReducer,\n  game: gameReducer\n});\n","import { applyMiddleware, createStore, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { reducers } from './reducers';\n\n// dev tool\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'views/App';\nimport { Provider } from 'react-redux';\nimport 'styles/global.scss';\n\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}