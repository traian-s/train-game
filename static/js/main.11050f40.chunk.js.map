{"version":3,"sources":["assets/images/pieces/line.svg","assets/images/pieces/curve.svg","assets/images/pieces/bridge.svg","assets/images/pieces/switch.svg","assets/images/pieces/padure.svg","assets/images/pieces/gara.svg","components/MessageLog/MessageLog.module.scss","constants/pieces.js","constants/game.js","store/actions/log.js","store/types/log.js","store/actions/game.js","store/types/game.js","utils/gameHelpers.js","store/actions/board.js","store/types/board.js","constants/assetsMap.js","components/SelectionWheel.jsx","components/Piece.jsx","views/Board.jsx","components/MessageLog/MessageLog.jsx","views/App.jsx","store/reducers/board.js","store/reducers/game.js","store/reducers/log.js","store/reducers/index.js","store/index.js","index.js"],"names":["module","exports","PIECE_TYPES","bridge","type","connections","allowRotate","curve","line","switch","station","forest","DIRECTIONS","GAME_STAGE","FOREST","moves","piece","STATIONS","TRACKS","logMessage","message","payload","setGameStage","stage","setActivePlayer","player","playerEndTurn","dispatch","getState","game","players","activeTurn","activeIdx","findIndex","p","id","turns","nextPlayer","allowed","executed","enableAllPieces","playerMakeMove","showLegalMoves","playerSetConnections","establishedConnections","connection","playerConnectionEstablishedEvent","playerSaveConnections","fakeBoard","enabled","occupied","rotation","ownerId","isOnMap","gameMap","posX","posY","getAdjacentDirections","filter","_","idx","getAdjacentCells","map","x","y","getConnectedCells","console","log","adjacentCells","cell","isLegalConnection","fromX","fromY","fromConnections","toX","toY","toConnections","forceConnection","direction","areCellsConnected","fromCell","toCell","previousCell","connectedCells","length","some","disablePiece","checkIsConnectionEstablished","board","reduce","acc","curr","getPlayerStations","fromStation","toStation","fromStationExits","toStationExits","fromToConnection","fromExit","toExit","conn","toFromConnection","distinctConnections","Math","min","parsedMoves","legalMoves","column","getLegalMoves","el","join","PIECES","linePiece","curvePiece","bridgePiece","switchPiece","forestPiece","stationPiece","SelectionWheel","internalType","internalRotate","hideWheel","setSelection","saveSelection","setRotation","className","Object","keys","includes","key","onClick","src","icon","faUndo","faTimes","actionTypes","reducer","state","action","isEnabled","selectionWheel","Piece","cornerPiece","setPiece","useReducer","useEffect","abs","mapDispatchToProps","initBoard","config","rows","columns","defaultPiece","matrix","setBoard","Array","fill","initPlayers","playerCount","parseInt","i","name","setPlayers","activePlayer","currentStage","currentType","currentRotation","connectionsCopy","reverse","times","push","shift","unshift","pop","rotateConnections","isLegal","errors","possibleConnections","val","isLegalStationPlacement","err","adjacentSquares","padCount","j","getAdjacentSquares","square","connectionLegal","every","legal","isLegalTrackPlacement","savePiece","connect","style","width","row","isCornerPiece","flex","messages","messageLog","styles","setRows","setColumns","pattern","value","onChange","e","target","initialState","count","reducers","combineReducers","assign","active","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.11050f40.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/line.2e3e852f.svg\";","module.exports = __webpack_public_path__ + \"static/media/curve.e4a33090.svg\";","module.exports = __webpack_public_path__ + \"static/media/bridge.2b4139f0.svg\";","module.exports = __webpack_public_path__ + \"static/media/switch.90588404.svg\";","module.exports = __webpack_public_path__ + \"static/media/padure.7a9c9b0c.svg\";","module.exports = __webpack_public_path__ + \"static/media/gara.830c43ab.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageLog\":\"_31afquc8zKJxVBgSbkIwG6\"};","// NORTH, EAST, SOUTH, WEST - CONNECTIONS ARE CLOCKWISE\n\nexport const PIECE_TYPES = {\n  bridge: {\n    type: 'bridge',\n    connections: [1, 1, 1, 1],\n    allowRotate: true\n  },\n  curve: {\n    type: 'curve',\n    connections: [1, 1, 0, 0],\n    allowRotate: true\n  },\n  line: {\n    type: 'line',\n    connections: [0, 1, 0, 1],\n    allowRotate: true\n  },\n  switch: {\n    type: 'switch',\n    connections: [1, 1, 0, 1],\n    allowRotate: true\n  },\n  station: {\n    type: 'station',\n    connections: [1, 1, 0, 1],\n    allowRotate: true\n  },\n  forest: {\n    type: 'forest',\n    connections: [0, 0, 0, 0],\n    allowRotate: false\n  }\n};\n\nexport const DIRECTIONS = ['NORTH', 'EAST', 'SOUTH', 'WEST'];\n\n// export Object.freeze(PIECE_TYPES);\n\n// export PIECE_TYPES;\n","import { PIECE_TYPES } from 'constants/pieces';\n\nexport const GAME_STAGE = {\n  FOREST: {\n    type: 'FOREST',\n    moves: 3,\n    piece: [PIECE_TYPES.forest.type]\n  },\n  STATIONS: {\n    type: 'STATIONS',\n    moves: 2,\n    piece: [PIECE_TYPES.station.type]\n  },\n  TRACKS: {\n    type: 'TRACKS',\n    moves: 1,\n    piece: [\n      PIECE_TYPES.bridge.type,\n      PIECE_TYPES.curve.type,\n      PIECE_TYPES.line.type,\n      PIECE_TYPES.switch.type\n    ]\n  }\n};\n","import { LOG_MESSAGE } from 'store/types/log';\n\nexport const logMessage = message => ({ type: LOG_MESSAGE, payload: message });\n","export const LOG_MESSAGE = 'LOG_MESSAGE';\n","import { GAME_STAGE } from 'constants/game';\nimport {\n  SET_TURN,\n  SET_PLAYER_COUNT,\n  SET_PLAYERS,\n  SET_ACTIVE_PLAYER,\n  SET_GAME_STAGE,\n  PLAYER_MOVE_ADD,\n  PLAYER_SET_CONNECTIONS\n} from 'store/types/game';\n\nimport { enableAllPieces, showLegalMoves } from 'store/actions/board';\nimport { logMessage } from './log';\n\nexport const setGameStage = stage => ({ type: SET_GAME_STAGE, payload: stage });\nexport const setPlayerCount = playerCount => ({ type: SET_PLAYER_COUNT, payload: playerCount });\nexport const setPlayers = players => ({ type: SET_PLAYERS, payload: players });\nexport const setActivePlayer = player => ({ type: SET_ACTIVE_PLAYER, payload: player });\nexport const playerMoveAdd = () => ({ type: PLAYER_MOVE_ADD });\nexport const playerSaveConnections = (player, connections) => ({\n  type: PLAYER_SET_CONNECTIONS,\n  payload: { player, connections }\n});\n\nexport const changeGameStage = () => (dispatch, getState) => {\n  const {\n    game: {\n      turns: { stage }\n    }\n  } = getState();\n  stage === GAME_STAGE.FOREST && dispatch(setGameStage(GAME_STAGE.STATIONS));\n  stage === GAME_STAGE.STATIONS && dispatch(setGameStage(GAME_STAGE.TRACKS));\n};\n\nexport const initPlayers = () => (dispatch, getState) => {\n  const {\n    game: { playerCount }\n  } = getState();\n\n  const players = [...Array(parseInt(playerCount))].map((_, i) => ({\n    id: i + 1,\n    name: `Player ${i + 1}`\n  }));\n\n  dispatch(setPlayers(players));\n  dispatch(setGameStage(GAME_STAGE.STATIONS));\n  const activePlayer = {\n    player: { ...players[0] },\n    moves: { allowed: GAME_STAGE.STATIONS.moves, executed: 0 }\n  };\n  dispatch(setActivePlayer(activePlayer));\n};\n\nexport const playerConnectionEstablishedEvent = (player, connection) => dispatch => {\n  dispatch(\n    logMessage(`Congratulations! Player ${player} has established ${connection} connections`)\n  );\n};\n\nexport const playerEndTurn = () => (dispatch, getState) => {\n  const {\n    game: {\n      players,\n      activeTurn: { player }\n    }\n  } = getState();\n\n  const activeIdx = players.findIndex(p => p.id === player.id);\n  if (!players[activeIdx + 1]) dispatch(changeGameStage());\n  const {\n    game: {\n      turns: {\n        stage: { moves }\n      }\n    }\n  } = getState();\n\n  const nextPlayer = {\n    player: players[activeIdx + 1] ? players[activeIdx + 1] : players[0],\n    moves: { allowed: moves, executed: 0 }\n  };\n  dispatch(enableAllPieces());\n  dispatch(setActivePlayer(nextPlayer));\n};\n\nexport const playerMakeMove = () => (dispatch, getState) => {\n  const {\n    game: {\n      activeTurn: {\n        moves: { allowed, executed }\n      }\n    }\n  } = getState();\n\n  dispatch(playerMoveAdd());\n  if (executed + 1 === allowed) dispatch(playerEndTurn());\n  dispatch(showLegalMoves());\n};\n\nexport const playerSetConnections = (player, connections) => (dispatch, getState) => {\n  const {\n    game: { establishedConnections }\n  } = getState();\n\n  if (!establishedConnections[player] || establishedConnections[player] < connections) {\n    dispatch(playerConnectionEstablishedEvent(player, connections));\n    dispatch(playerSaveConnections(player, connections));\n  }\n};\n\nexport const setTurn = () => ({ type: SET_TURN });\n","export const NEXT_TURN = 'NEXT_TURN';\nexport const INIT_PLAYERS = 'INIT_PLAYERS';\nexport const SET_PLAYER_COUNT = 'SET_PLAYER_COUNT';\nexport const SET_PLAYERS = 'SET_PLAYERS';\nexport const SET_TURN = 'SET_PLAYER_TURN';\nexport const SET_ACTIVE_PLAYER = 'SET_ACTIVE_PLAYER';\nexport const SET_GAME_STAGE = 'SET_GAME_STAGE';\nexport const PLAYER_MAKE_MOVE = 'PLAYER_MAKE_MOVE';\nexport const PLAYER_MOVE_ADD = 'PLAYER_MOVE_ADD';\nexport const PLAYER_END_TURN = 'PLAYER_END_TURN';\nexport const PLAYER_SET_CONNECTIONS = 'PLAYER_SET_CONNECTIONS';\n","/* eslint-disable no-unused-vars */\n/* eslint-disable no-debugger */\n// export const isMatch = (pieceA, pieceB) => {};\nimport { DIRECTIONS, PIECE_TYPES } from 'constants/pieces';\n\nconst fakeBoard = [\n  [\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    }\n  ],\n  [\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      connections: [1, 1, 0, 1],\n      enabled: true,\n      ownerId: 2,\n      type: 'station',\n      rotation: 0\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      connections: [0, 1, 1, 1],\n      enabled: true,\n      ownerId: 1,\n      type: 'station',\n      rotation: -180\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    }\n  ],\n  [\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    }\n  ],\n  [\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    }\n  ],\n  [\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    }\n  ],\n  [\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    }\n  ],\n  [\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      connections: [1, 1, 0, 1],\n      enabled: true,\n      ownerId: 2,\n      type: 'station',\n      rotation: 0\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      connections: [1, 1, 0, 1],\n      enabled: true,\n      ownerId: 1,\n      type: 'station',\n      rotation: 0\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    }\n  ],\n  [\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    },\n    {\n      enabled: true,\n      occupied: false,\n      type: '',\n      rotation: 0,\n      connections: [],\n      ownerId: null\n    }\n  ]\n];\n\nexport const rotateConnections = (connections, rotation) => {\n  const connectionsCopy = [...connections];\n  const reverse = rotation < 0;\n  const times = Math.abs(rotation / 90);\n  for (let i = 0; i < times; i++) {\n    if (reverse) connectionsCopy.push(connectionsCopy.shift());\n    else connectionsCopy.unshift(connectionsCopy.pop());\n  }\n  return connectionsCopy;\n};\n\n/**\n * Checks if provided cell belongs to the game map\n *\n * @param {object} cell a cell object\n * @param {object} gameMap a game map object\n *\n * @returns {boolean} True if cell is on the game map\n */\nexport const isOnMap = ({ posX, posY }, gameMap) => {\n  return typeof gameMap[posX] !== 'undefined' && typeof gameMap[posX][posY] !== 'undefined';\n};\n\nexport const getAdjacentSquares = (posX, posY, rows, columns, padCount) => {\n  const adjacentSquares = [];\n  for (let i = posX - padCount; i <= posX + padCount; i++) {\n    for (let j = posY - padCount; j <= posY + padCount; j++) {\n      if (i >= 0 && i < rows && j >= 0 && j < columns) adjacentSquares.push([i, j]);\n    }\n  }\n  return adjacentSquares;\n};\n\n/**\n * Given a cell and a game map returns an array of [x, y] coordinates representing\n * cells that can be reached from the provided cell that are also on the map.\n * If connections is not provided it will assume it can connect to all cells.\n *\n * @param {number} posX X position of cell\n * @param {number} posY Y position of cell\n * @param {array} gameMap\n *\n * @returns {array} Returns array of legal directions\n */\nexport const getAdjacentDirections = ({ posX, posY, connections = [1, 1, 1, 1] }, gameMap) => {\n  if (!isOnMap({ posX, posY }, gameMap)) return null;\n  return [\n    [posX - 1, posY],\n    [posX, posY + 1],\n    [posX + 1, posY],\n    [posX, posY - 1]\n  ]\n    .filter((_, idx) => connections[idx] === 1)\n    .filter(([posX, posY]) => isOnMap({ posX, posY }, gameMap));\n};\n\n/**\n * Takes the result of getAdjacentDirections and returns actual cells\n *\n * @param {object} cell a cell object\n * @param {object} gameMap a gameMap object\n *\n * @returns {array} An array of cells or empty array\n */\nexport const getAdjacentCells = ({ posX, posY, connections = [1, 1, 1, 1] }, gameMap) => {\n  const directions = getAdjacentDirections({ posX, posY, connections }, gameMap);\n  return directions.map(([x, y]) => gameMap[x][y]) || [];\n};\n\n/**\n * Given a cell and a game map returns all adjacent cells\n * that the current cell is connected to: it must have a connection\n * to that cell && that cell must have a connection back to it\n *\n * @param {object} cell a cell object\n * @param {object} gameMap a game map object\n *\n * @returns {array} an array of cells or empty\n */\nexport const getConnectedCells = ({ posX, posY, connections } = {}, gameMap) => {\n  console.log(`Called with ${posX} ${posY}`);\n  if (!posX || !posY) return [];\n  const adjacentCells = getAdjacentCells({ posX, posY }, gameMap);\n  return adjacentCells\n    .filter(cell => cell.occupied === true)\n    .filter(cell => isLegalConnection({ posX, posY, connections }, cell, true));\n  // console.log(`[getConnectedCells]: `, connectedCells);\n};\n\nexport const getLegalMoves = (gameMap, player) => {\n  // console.log(`getLegalMoves called with ${gameMap} ${player}`);\n  gameMap = gameMap || fakeBoard;\n  let legalMoves = [];\n  if (!gameMap.length || !player) return;\n  gameMap.map(column => {\n    column.map(cell => {\n      if (cell.ownerId === player) {\n        legalMoves = [...legalMoves, ...getAdjacentDirections(cell, gameMap)];\n      }\n    });\n  });\n\n  return legalMoves;\n};\n\n/**\n * Provided a gameMap and a player ID\n * Will return the two cells representing the players stations\n *\n * @param {object} gameMap a game map object\n * @param {number} player  a player id\n *\n * @returns {array} an array of cells\n */\nexport const getPlayerStations = (gameMap, player) => {\n  return gameMap.reduce((acc, curr) => {\n    const station = curr.filter(\n      cell => cell.ownerId === player && cell.type === PIECE_TYPES.station.type\n    );\n    return station.length ? [...acc, ...station] : acc;\n  }, []);\n};\n\nexport const isCellOccupied = ({ occupied }) => occupied !== false;\n\n/**\n * Given two adjacent cells it verifies their position in relation to eachother\n * and returns true if a connection is satisfied between them: both must have either no connection\n * to eachother OR they must both have a connection to eachother\n * If provided with forceConnection flag then it will only return true\n * if both have connection to eachother\n *\n * @param {object} fromCell a from cell object\n * @param {object} toCell a to cell object\n * @param {*} forceConnection\n */\nexport const isLegalConnection = (\n  { posX: fromX, posY: fromY, connections: fromConnections },\n  { posX: toX, posY: toY, connections: toConnections },\n  forceConnection = false\n) => {\n  const direction = `${fromX - toX}${fromY - toY}`;\n  switch (direction) {\n    case '10': {\n      // Piece 1 is south of piece 2\n      return forceConnection\n        ? fromConnections[0] && toConnections[2]\n        : fromConnections[0] === toConnections[2];\n    }\n    case '0-1': {\n      // Piece 1 is west of piece 2\n      return forceConnection\n        ? fromConnections[1] && toConnections[3]\n        : fromConnections[1] === toConnections[3];\n    }\n    case '-10': {\n      // Piece 1 is north of piece 2\n      return forceConnection\n        ? fromConnections[2] && toConnections[0]\n        : fromConnections[2] === toConnections[0];\n    }\n    case '01': {\n      // Piece 1 is east of piece 2\n      return forceConnection\n        ? fromConnections[3] && toConnections[1]\n        : fromConnections[3] === toConnections[1];\n    }\n    default:\n      return false;\n  }\n};\n\nexport const isLegalStationPlacement = ({ posX, posY, connections }, rows, columns) => {\n  let isLegal = true;\n  const errors = [];\n\n  const possibleConnections = [\n    [posX - 1, posY],\n    [posX, posY + 1],\n    [posX + 1, posY],\n    [posX, posY - 1]\n  ].reduce((acc, val) => {\n    const [x, y] = val;\n    return [...acc, +(0 <= x && x < rows && 0 <= y && y < columns)];\n  }, []);\n\n  connections.map((val, idx) => {\n    if (val === 1 && possibleConnections[idx] !== 1) {\n      errors.push(`Illegal Station Placement. ${DIRECTIONS[idx]} direction is blocked.`);\n      isLegal = false;\n    }\n  });\n\n  return { isLegal, errors };\n};\n\nexport const isLegalTrackPlacement = ({ posX, posY, connections }, gameMap) => {\n  // Must connect all adjacent tracks if any\n  // Must connect at least two squares that are on the game map\n\n  const adjacentCells = getAdjacentCells({ posX, posY }, gameMap);\n\n  // Map over all adjacent cells\n  // For occupied ones check if they have a connection into the current cell\n  // Then that connection must be satisfied by the current cell\n  const connectionLegal = adjacentCells\n    .filter(cell => cell.occupied)\n    .map(cell => isLegalConnection({ posX, posY, connections }, cell))\n    .every(legal => legal === true);\n\n  // Check if at least 2 of the connections are on the map\n  // A piece that directs only outside the map is not legal\n  const connectedCells = getAdjacentCells({ posX, posY, connections }, gameMap);\n  return connectionLegal && connectedCells.length >= 2;\n};\n\n/**\n * Given a fromCell, a toCell and a gameMap returns true if there is a\n * path between fromCell and toCell\n *\n * @param {object} fromCell A cell object\n * @param {object} toCell A cell object\n * @param {object} gameMap A game map object\n * @param {object} previousCell A cell object\n *\n * @returns {bool} Whether the cells are connected or not\n */\nexport const areCellsConnected = (fromCell, toCell, gameMap, previousCell = {}) => {\n  console.log(`[areCellsConnected] called with:`, fromCell, toCell, gameMap);\n  if (!fromCell || !toCell || !gameMap) return false;\n\n  // Don't pass through a station to determine a connection; avoids breaking loops\n  if (fromCell.type === PIECE_TYPES.station.type) return false;\n\n  if (fromCell?.posX === toCell?.posX && fromCell?.posY === toCell?.posY) {\n    // We have reached the end of the connection\n    return true;\n  }\n\n  const connectedCells = getConnectedCells(fromCell, gameMap);\n  if (!connectedCells.length) return false; // We have reached the end of this path and there is no connection\n\n  console.log(`[areCellsConnected]: previous cell is ${previousCell.posX} ${previousCell.posY}`);\n  console.log(\n    `[areCellsConnected] filtering out previous cells leaves:`,\n    connectedCells.filter(\n      cell => cell.posX !== previousCell.posX && cell.posY !== previousCell.posY\n    )\n  );\n\n  return connectedCells\n    .filter(cell => cell.posX !== previousCell.posX || cell.posY !== previousCell.posY)\n    .map(cell => areCellsConnected(cell, toCell, gameMap, fromCell))\n    .some(connection => connection === true);\n};\n","/* eslint-disable no-debugger */\nimport {\n  SET_BOARD,\n  SET_ROWS,\n  SET_COLUMNS,\n  SET_PIECE,\n  SET_LEGAL_MOVES,\n  ENABLE_PIECE,\n  DISABLE_PIECE,\n  ENABLE_ALL_PIECES\n} from 'store/types/board';\nimport { playerMakeMove, playerSetConnections } from 'store/actions/game';\nimport { logMessage } from 'store/actions/log';\n\nimport { PIECE_TYPES } from 'constants/pieces';\nimport { GAME_STAGE } from 'constants/game';\n\nimport {\n  areCellsConnected,\n  getAdjacentSquares,\n  getConnectedCells,\n  getLegalMoves,\n  getPlayerStations,\n  isLegalStationPlacement,\n  isLegalTrackPlacement,\n  rotateConnections\n} from 'utils/gameHelpers';\n\nexport const setRows = rows => ({ type: SET_ROWS, payload: rows });\nexport const setColumns = columns => ({ type: SET_COLUMNS, payload: columns });\nexport const setBoard = matrix => ({ type: SET_BOARD, payload: matrix });\nexport const setLegalMoves = moves => ({ type: SET_LEGAL_MOVES, payload: { moves } });\nexport const savePiece = (x, y, piece) => ({ type: SET_PIECE, payload: { x, y, piece } });\nexport const enableAllPieces = () => ({ type: ENABLE_ALL_PIECES });\nexport const enablePiece = (x, y) => ({ type: ENABLE_PIECE, payload: { x, y } });\nexport const disablePiece = (x, y) => ({ type: DISABLE_PIECE, payload: { x, y } });\n\nexport const initBoard = () => (dispatch, getState) => {\n  const {\n    board: {\n      config: { rows, columns }\n    }\n  } = getState();\n\n  const defaultPiece = {\n    enabled: true,\n    occupied: false,\n    ownerId: null,\n    type: '',\n    rotation: 0,\n    connections: []\n  };\n\n  const matrix = Array(rows)\n    .fill(null)\n    .map((_, posX) =>\n      Array(columns)\n        .fill(null)\n        .map((_, posY) => ({ ...defaultPiece, posX, posY }))\n    );\n\n  // const matrix = new Array(rows)\n  //   .fill(0)\n  //   .map((, posX) => new Array(columns).fill({ ...defaultPiece, posX: rows, posY: columns }));\n  dispatch(setBoard(matrix));\n};\n\nexport const setPiece = (posX, posY, type, rotation) => (dispatch, getState) => {\n  const {\n    game: {\n      activeTurn: {\n        player: { id }\n      },\n      turns: {\n        stage: { type: currentStage }\n      }\n    },\n    board: {\n      config: { rows, columns },\n      gameMap: {\n        [posX]: {\n          [posY]: { type: currentType, rotation: currentRotation }\n        }\n      },\n      gameMap\n    }\n  } = getState();\n\n  if (type === currentType && rotation === currentRotation) {\n    dispatch(logMessage(`No change registered.`));\n    return;\n  }\n\n  const connections = rotateConnections(PIECE_TYPES[type].connections, rotation);\n\n  if (currentStage === GAME_STAGE.STATIONS.type) {\n    const { isLegal, errors } = isLegalStationPlacement({ posX, posY, connections }, rows, columns);\n    if (!isLegal) {\n      errors.map(err => dispatch(logMessage(err)));\n      return;\n    }\n\n    const adjacentSquares = getAdjacentSquares(posX, posY, rows, columns, 2);\n    console.log(adjacentSquares);\n    adjacentSquares.map(square => {\n      dispatch(disablePiece(...square));\n    });\n  }\n\n  if (currentStage === GAME_STAGE.TRACKS.type) {\n    // We need to do something here...\n\n    const isLegal = isLegalTrackPlacement({ posX, posY, connections }, gameMap);\n    if (!isLegal) {\n      dispatch(logMessage(`Move is not legal.`));\n      return;\n    }\n  }\n\n  const piece = {\n    connections,\n    enabled: true,\n    occupied: true,\n    ownerId: id,\n    posX,\n    posY,\n    type,\n    rotation\n  };\n  dispatch(savePiece(posX, posY, piece));\n  dispatch(checkIsConnectionEstablished());\n  dispatch(playerMakeMove());\n};\n\nexport const checkIsConnectionEstablished = () => (dispatch, getState) => {\n  const {\n    game: {\n      activeTurn: {\n        player: { id }\n      }\n    },\n    board: { gameMap }\n  } = getState();\n  const [fromStation, toStation] = getPlayerStations(gameMap, id);\n\n  const fromStationExits = getConnectedCells(fromStation, gameMap);\n  const toStationExits = getConnectedCells(toStation, gameMap);\n\n  if (!fromStationExits.length || !toStationExits.length) return;\n  const fromToConnection = fromStationExits\n    .map(fromExit =>\n      toStationExits\n        .map(toExit => areCellsConnected(fromExit, toExit, gameMap))\n        .some(conn => conn === true)\n    )\n    .filter(conn => conn === true).length;\n\n  const toFromConnection = toStationExits\n    .map(toExit =>\n      fromStationExits\n        .map(fromExit => areCellsConnected(toExit, fromExit, gameMap))\n        .some(conn => conn === true)\n    )\n    .filter(conn => conn === true).length;\n\n  const distinctConnections = Math.min(fromToConnection, toFromConnection);\n\n  if (distinctConnections) dispatch(playerSetConnections(id, distinctConnections));\n\n  console.log(`[checkIsConnectionEstablished]: Distinct connections found`, distinctConnections);\n\n  // .filter(connection => connection === true);\n\n  // eslint-disable-next-line no-alert\n  // if (connections.length === 2) alert('You have won the game good sir');\n\n  // if (areCellsConnected(station1, station2, gameMap))\n  //   dispatch(logMessage('Congratulations, you have established a connection!'));\n};\n\nexport const showLegalMoves = () => (dispatch, getState) => {\n  const {\n    board: { gameMap },\n    game: {\n      activeTurn: {\n        player: { id }\n      },\n      turns: {\n        stage: { type: stageType }\n      }\n    }\n  } = getState();\n\n  if (stageType !== GAME_STAGE.TRACKS.type) return;\n\n  const legalMoves = getLegalMoves(gameMap, id);\n  const parsedMoves = legalMoves.map(el => el.join());\n  if (parsedMoves.length) dispatch(setLegalMoves(parsedMoves));\n};\n","export const SET_BOARD = 'SET_BOARD';\nexport const SET_COLUMNS = 'SET_COLUMNS';\nexport const SET_ROWS = 'SET_ROWS';\nexport const SET_PIECE = 'SET_PIECE';\nexport const ENABLE_PIECE = 'ENABLE_PIECE';\nexport const SET_LEGAL_MOVES = 'SET_LEGAL_MOVES';\nexport const DISABLE_PIECE = 'DISABLE_PIECE';\nexport const ENABLE_ALL_PIECES = 'ENABLE_ALL_PIECES';\n","import linePiece from 'images/pieces/line.svg';\nimport curvePiece from 'images/pieces/curve.svg';\nimport bridgePiece from 'images/pieces/bridge.svg';\nimport switchPiece from 'images/pieces/switch.svg';\nimport forestPiece from 'images/pieces/padure.svg';\nimport stationPiece from 'images/pieces/gara.svg';\n\nexport const PIECES = {\n  line: linePiece,\n  curve: curvePiece,\n  bridge: bridgePiece,\n  switch: switchPiece,\n  forest: forestPiece,\n  station: stationPiece\n};\n\nexport default PIECES;\n","import React from 'react';\n\nimport PIECES from 'constants/assetsMap';\nimport { GAME_STAGE } from 'constants/game';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUndo, faTimes } from '@fortawesome/free-solid-svg-icons';\n\nexport const SelectionWheel = ({\n  allowRotate,\n  internalType,\n  internalRotate,\n  hideWheel,\n  setSelection,\n  saveSelection,\n  setRotation,\n  stage\n}) => (\n  <div className={'selection-wheel'}>\n    {Object.keys(PIECES)\n      .filter(piece => GAME_STAGE[stage].piece.includes(piece))\n      .map((key, idx) => {\n        return (\n          <div key={idx} className={`quadrant quadrant-${idx}`} onClick={() => setSelection(key)}>\n            <img src={PIECES[key]} />\n          </div>\n        );\n      })}\n    <div className={'selection-preview'} onClick={() => saveSelection()}>\n      {internalType && <img className={`rotate-${internalRotate}`} src={PIECES[internalType]} />}\n    </div>\n    {allowRotate && (\n      <>\n        <div className={'selection-rotate-right'} onClick={() => setRotation(90)}>\n          <FontAwesomeIcon icon={faUndo} />\n        </div>\n        <div className={'selection-rotate-left'} onClick={() => setRotation(-90)}>\n          <FontAwesomeIcon icon={faUndo} />\n        </div>\n      </>\n    )}\n    <div className={'selection-close'} onClick={() => hideWheel()}>\n      <FontAwesomeIcon icon={faTimes} />\n    </div>\n  </div>\n);\n","import React, { useEffect, useReducer } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { SelectionWheel } from 'components/SelectionWheel';\n\nimport PIECES from 'constants/assetsMap';\nimport { PIECE_TYPES } from 'constants/pieces';\nimport { GAME_STAGE } from 'constants/game';\n\nconst actionTypes = {\n  SET_ALLOW_ROTATE: 'SET_ALLOW_ROTATE',\n  SET_TYPE: 'SET_TYPE',\n  SET_ROTATE: 'SET_ROTATE',\n  SET_DISABLED: 'SET_DISABLED',\n  SET_ENABLED: 'SET_ENABLED',\n  SHOW_SELECTION_WHEEL: 'SHOW_SELECTION_WHEEL',\n  HIDE_SELECTION_WHEEL: 'HIDE_SELECTION_WHEEL'\n};\n\nconst reducer = (state, action) => {\n  console.log(`${action.type} called with payload: ${action.payload}`);\n  switch (action.type) {\n    case actionTypes.SET_ALLOW_ROTATE:\n      return { ...state, allowRotate: action.payload };\n    case actionTypes.SET_TYPE:\n      return { ...state, internalType: action.payload };\n    case actionTypes.SET_ROTATE:\n      return { ...state, internalRotate: action.payload };\n    case actionTypes.SET_ENABLED:\n      return { ...state, isEnabled: true };\n    case actionTypes.SET_DISABLED:\n      return { ...state, isEnabled: false };\n    case actionTypes.SHOW_SELECTION_WHEEL:\n      return { ...state, selectionWheel: true };\n    case actionTypes.HIDE_SELECTION_WHEEL:\n      return { ...state, selectionWheel: false };\n  }\n};\n\nconst Piece = ({ cornerPiece, enabled, rotation, type, stage, posX, posY, setPiece }) => {\n  const [\n    { allowRotate, internalType, internalRotate, isEnabled, selectionWheel },\n    dispatch\n  ] = useReducer(reducer, {\n    allowRotate: false,\n    internalType: type,\n    internalRotate: rotation ? rotation : 0,\n    isEnabled: true,\n    selectionWheel: false\n  });\n\n  useEffect(() => {\n    if (cornerPiece === true && GAME_STAGE[stage] === GAME_STAGE.STATIONS)\n      dispatch({ type: actionTypes.SET_DISABLED });\n  }, [stage]);\n\n  const showWheel = () => (isEnabled ? dispatch({ type: actionTypes.SHOW_SELECTION_WHEEL }) : null);\n\n  const hideWheel = () => dispatch({ type: actionTypes.HIDE_SELECTION_WHEEL });\n\n  const setSelection = type => {\n    dispatch({ type: actionTypes.SET_TYPE, payload: type });\n    dispatch({ type: actionTypes.SET_ALLOW_ROTATE, payload: PIECE_TYPES[type].allowRotate });\n  };\n\n  const saveSelection = () => {\n    hideWheel();\n    setPiece(posX, posY, internalType, internalRotate);\n  };\n\n  const setRotation = rotation => {\n    dispatch({\n      type: actionTypes.SET_ROTATE,\n      payload: Math.abs(internalRotate + rotation) === 360 ? 0 : internalRotate + rotation\n    });\n  };\n\n  return (\n    <div\n      className={`piece piece-${type} ${enabled ? 'enabled' : 'disabled'} ${\n        selectionWheel ? 'show-wheel' : ''\n      }`}\n    >\n      <SelectionWheel\n        allowRotate={allowRotate}\n        hideWheel={hideWheel}\n        internalType={internalType}\n        internalRotate={internalRotate}\n        setSelection={setSelection}\n        saveSelection={saveSelection}\n        setRotation={setRotation}\n        stage={stage}\n      />\n      <div className={'piece-image'} onClick={() => showWheel()}>\n        {type && <img className={`rotate-${rotation}`} src={PIECES[type]} />}\n      </div>\n    </div>\n  );\n};\n\nPiece.propTypes = {\n  cornerPiece: PropTypes.bool.isRequired,\n  enabled: PropTypes.bool.isRequired,\n  rotation: PropTypes.number.isRequired,\n  type: PropTypes.oneOf([...Object.keys(PIECE_TYPES), '']).isRequired,\n  stage: PropTypes.oneOf([...Object.keys(GAME_STAGE), '']).isRequired,\n  posX: PropTypes.number.isRequired,\n  posY: PropTypes.number.isRequired,\n  setPiece: PropTypes.func.isRequired\n};\n\nexport default Piece;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { initBoard, setPiece } from 'store/actions/board';\nimport { initPlayers, playerMakeMove } from 'store/actions/game';\nimport Piece from 'components/Piece';\n\nconst Board = ({ board, rows, columns, stage, setPiece, initBoard, initPlayers }) => {\n  useEffect(() => {\n    initBoard();\n    initPlayers();\n  }, []);\n\n  return (\n    <div className={'game-board'} style={{ width: `calc(80px * ${columns})` }}>\n      {board.map((row, i) =>\n        row.map((cell, j) => {\n          const isCornerPiece =\n            (i == 0 && j == 0) ||\n            (i == rows - 1 && j == columns - 1) ||\n            (i == 0 && j == columns - 1) ||\n            (i == rows - 1 && j == 0);\n          return (\n            <div\n              className={`cell \n                ${j === columns - 1 ? 'right-edge' : ''} \n                ${i === rows - 1 ? 'bottom-edge' : ''}`}\n              style={{ flex: `calc(100% / ${columns} - 1px) 0 0` }}\n              key={`cell-${i}${j}`}\n            >\n              <Piece\n                cornerPiece={isCornerPiece}\n                posX={i}\n                posY={j}\n                setPiece={setPiece}\n                stage={stage}\n                {...cell}\n              />\n            </div>\n          );\n        })\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  board: state.board.gameMap,\n  stage: state.game.turns.stage.type\n});\n\nconst mapDispatchToProps = { initBoard, initPlayers, setPiece, playerMakeMove };\n\nBoard.propTypes = {\n  rows: PropTypes.number,\n  columns: PropTypes.number,\n  board: PropTypes.array,\n  initBoard: PropTypes.func,\n  initPlayers: PropTypes.func,\n  setPiece: PropTypes.func,\n  stage: PropTypes.object\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport styles from './MessageLog.module';\n\nconst MessageLog = ({ messages = [] }) => (\n  <ul className={styles.messageLog}>\n    {messages.map((message, idx) => (\n      <li key={idx}>{message}</li>\n    ))}\n  </ul>\n);\n\nMessageLog.propTypes = {\n  messages: PropTypes.arrayOf(PropTypes.string)\n};\n\nconst mapStateToProps = ({ messageLog: { messages } }) => ({ messages });\n\nexport default connect(mapStateToProps)(MessageLog);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { setColumns, setRows } from 'store/actions/board';\nimport Board from 'views/Board';\nimport MessageLog from 'components/MessageLog/MessageLog';\n\nfunction App({ rows, columns, setRows, setColumns, stage, activePlayer }) {\n  return (\n    <div className=\"App\">\n      <div className={'controls'}>\n        <label>{'Rows:'}</label>\n        <input\n          type={'number'}\n          pattern={'[0-9]*'}\n          value={rows}\n          onChange={e => setRows(e.target.value)}\n        />\n        <br />\n        <label>{'Columns:'}</label>\n        <input\n          type={'number'}\n          pattern={'[0-9]*'}\n          value={columns}\n          onChange={e => setColumns(e.target.value)}\n        />\n        <br />\n        <h3>Stage: {stage}</h3>\n        {activePlayer.player.name} make {activePlayer.moves.allowed - activePlayer.moves.executed}{' '}\n        moves\n      </div>\n      <MessageLog />\n      <Board rows={rows} columns={columns} />\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  rows: state.board.config.rows,\n  columns: state.board.config.columns,\n  stage: state.game.turns.stage.type,\n  activePlayer: state.game.activeTurn\n});\n\nconst mapDispatchToProps = {\n  setRows,\n  setColumns\n};\n\nApp.propTypes = {\n  rows: PropTypes.number,\n  columns: PropTypes.number,\n  setRows: PropTypes.func,\n  setColumns: PropTypes.func\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  SET_BOARD,\n  SET_COLUMNS,\n  SET_ROWS,\n  SET_PIECE,\n  ENABLE_PIECE,\n  DISABLE_PIECE,\n  SET_LEGAL_MOVES,\n  ENABLE_ALL_PIECES\n} from 'store/types/board';\n\nexport const initialState = {\n  config: {\n    rows: 8,\n    columns: 8\n  },\n  gameMap: []\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_BOARD:\n      return { ...state, gameMap: action.payload };\n\n    case SET_ROWS:\n      return { ...state, config: { ...state.config, rows: action.payload } };\n\n    case SET_COLUMNS:\n      return { ...state, config: { ...state.config, columns: action.payload } };\n\n    case SET_PIECE:\n      return {\n        ...state,\n        gameMap: Object.assign([...state.gameMap], {\n          [action.payload.x]: Object.assign([...state.gameMap[action.payload.x]], {\n            [action.payload.y]: {\n              ...action.payload.piece\n            }\n          })\n        })\n      };\n\n    case ENABLE_PIECE:\n      return {\n        ...state,\n        gameMap: Object.assign([...state.gameMap], {\n          [action.payload.x]: Object.assign([...state.gameMap[action.payload.x]], {\n            [action.payload.y]: {\n              ...state.gameMap[action.payload.x][action.payload.y],\n              enabled: true\n            }\n          })\n        })\n      };\n\n    case DISABLE_PIECE:\n      return {\n        ...state,\n        gameMap: Object.assign([...state.gameMap], {\n          [action.payload.x]: Object.assign([...state.gameMap[action.payload.x]], {\n            [action.payload.y]: {\n              ...state.gameMap[action.payload.x][action.payload.y],\n              enabled: false\n            }\n          })\n        })\n      };\n\n    case SET_LEGAL_MOVES: {\n      return {\n        ...state,\n        gameMap: state.gameMap.map((rows, posX) =>\n          rows.map((cell, posY) =>\n            action.payload.moves.includes(`${posX},${posY}`)\n              ? { ...cell, enabled: true }\n              : { ...cell, enabled: false }\n          )\n        )\n      };\n    }\n\n    case ENABLE_ALL_PIECES: {\n      return {\n        ...state,\n        gameMap: state.gameMap.map(rows => rows.map(cell => ({ ...cell, enabled: true })))\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n","import {\n  INIT_PLAYERS,\n  SET_PLAYER_COUNT,\n  SET_PLAYERS,\n  SET_TURN,\n  SET_GAME_STAGE,\n  SET_ACTIVE_PLAYER,\n  PLAYER_MOVE_ADD,\n  PLAYER_SET_CONNECTIONS\n} from 'store/types/game';\n\nexport const initialState = {\n  activeTurn: {\n    player: {},\n    moves: {\n      allowed: 0,\n      executed: 0\n    }\n  },\n  establishedConnections: {},\n  playerCount: 1,\n  players: {},\n  turns: {\n    count: 1,\n    stage: ''\n  }\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case INIT_PLAYERS:\n      return { ...state, players: { ...action.payload } };\n    case PLAYER_MOVE_ADD:\n      return {\n        ...state,\n        activeTurn: {\n          ...state.activeTurn,\n          moves: { ...state.activeTurn.moves, executed: state.activeTurn.moves.executed + 1 }\n        }\n      };\n    case PLAYER_SET_CONNECTIONS:\n      return {\n        ...state,\n        establishedConnections: {\n          ...state.establishedConnections,\n          [action.payload.player]: action.payload.connections\n        }\n      };\n    case SET_TURN:\n      return { ...state, turns: { ...state.turns, active: action.payload } };\n    case SET_PLAYER_COUNT:\n      return { ...state, playerCount: action.payload };\n    case SET_PLAYERS:\n      return { ...state, players: action.payload };\n    case SET_GAME_STAGE:\n      return { ...state, turns: { ...state.turns, stage: action.payload } };\n    case SET_ACTIVE_PLAYER:\n      return { ...state, activeTurn: action.payload };\n    default:\n      return state;\n  }\n};\n","import { LOG_MESSAGE } from 'store/types/log';\n\nconst initialState = {\n  messages: ['Welcome!']\n};\n\nexport default (state = initialState, { type, payload }) => {\n  switch (type) {\n    case LOG_MESSAGE:\n      return { messages: [...state.messages, payload] };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport boardReducer from './board';\nimport gameReducer from './game';\nimport logReducer from './log';\n\nexport const reducers = combineReducers({\n  board: boardReducer,\n  game: gameReducer,\n  messageLog: logReducer\n});\n","import { applyMiddleware, createStore, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { reducers } from './reducers';\n\n// dev tool\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'views/App';\nimport { Provider } from 'react-redux';\nimport 'styles/global.scss';\n\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}